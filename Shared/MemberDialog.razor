<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body">
               <form class="form">
                    <div class="form-group">
                        <label>
                            <input type="radio" value="男" checked='@(member.Gender == "男")' @onchange='(() => { member.Gender = "男" ;})'>男
                        </label>
                        <label>
                            <input type="radio" value="女" checked='@(member.Gender == "女")' @onchange='(() => { member.Gender = "女" ;})'>女
                        </label>
                    </div>
                    <div class="form-group mt-2">
                        <label>姓名</label>
                        <input type="text" size="10" class="form-control" @bind="member.Name">
                    </div>
                    <div class="form-group mt-2">
                        <label>地區</label>
                         <select class="form-select" style="width:auto;" @bind="member.School">
                            @foreach (string s in RegisterApp.Data.Config.Schools)
                            {
                                <option value="@s">@s</option>
                            }
                        </select>
                    </div>
                    @if (!string.IsNullOrEmpty(eventObj.Survey1Question)){
                        <label class="mr-4">@eventObj.Survey1Question</label>
                        <div class="mt-2 form-group">
                            @foreach (string opt in @eventObj.Survey1Option.Split(',')){
                                <div class="form-check form-check-inline">
                                    <label class="form-check-label">@opt</label>
                                    <input class="form-check-input" type="radio" value="@opt" checked='@(member.Survey1Answer == opt)' @onchange='(() => { member.Survey1Answer = opt ;})'>
                                </div>
                            }
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(eventObj.Survey2Question)){
                        <label class="mr-4">@eventObj.Survey2Question</label>
                        <div class="mt-2 input-group">
                            @foreach (string opt in @eventObj.Survey2Option.Split(',')){
                                <div class="form-check form-check-inline">
                                    <label class="form-check-label">@opt</label>
                                    <input class="form-check-input" type="radio" value="@opt" checked='@(member.Survey2Answer == opt)' @onchange='(() => { member.Survey2Answer = opt ;})'>
                                </div>
                            }
                        </div>
                    }
                    <div class="form-group mt-4">
                        <label>備註</label>
                        <input type="text" size="10" class="form-control" @bind="member.Remark">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick=@ModalSave>更新</button>
                @if (eventObj.Mode == 1){
                    <button type="button" class="btn btn-primary" @onclick=@ModalDelete>刪除</button>
                }
                <button type="button" class="btn btn-primary" @onclick=@ModalCancel>取消</button>
            </div>
        </div>
    </div>
</div>

@code{
    [Parameter]
    public EventMember member { get; set;}
    [Parameter]
    public Event eventObj { get; set;}

    [Parameter]
    public EventCallback<bool> OnClose {get;set;}
    [Parameter]
    public EventCallback<EventMember> OnSave {get;set;}
    [Parameter]
    public EventCallback<EventMember> OnDelete {get;set;}

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }
    private Task ModalDelete()
    {
        return OnDelete.InvokeAsync(member);
    }
    private Task ModalSave()
    {
        return OnSave.InvokeAsync(member);
    }
}